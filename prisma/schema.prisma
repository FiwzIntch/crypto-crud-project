generator client {
  provider = "prisma-client-js"
}

generator markdown {
  provider = "prisma-markdown"
  output   = "./ERD.md"
  title    = "Crypto CRUD Project"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cryptocurrency {
  id    Int    @id @default(autoincrement())
  name  String
  price Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders              Order[]
  purchaseOrders      PurchaseOrder[]
  userCryptocurrencys UserCryptocurrency[]
  transfers           Transfer[]
  transactions        Transaction[]
}

model FiatCurrency {
  id    Int    @id @default(autoincrement())
  name  String
  price Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]
}

model User {
  id             Int    @id @default(autoincrement())
  email          String
  password       String
  firstName      String
  lastName       String
  balance        Float
  fiatCurrencyId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fiatCurrency        FiatCurrency         @relation(fields: [fiatCurrencyId], references: [id], onDelete: Cascade)
  orders              Order[]
  purchaseOrders      PurchaseOrder[]
  userCryptocurrencys UserCryptocurrency[]
  fromTransfers       Transfer[]           @relation("fromUser")
  toTransfers         Transfer[]           @relation("toUser")
}

model UserCryptocurrency {
  id       Int   @id @default(autoincrement())
  amount   Float
  userId   Int
  cryptoId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  crypto Cryptocurrency @relation(fields: [cryptoId], references: [id], onDelete: Cascade)
  user   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Status {
  COMPLETE
  PENDING
  CANCEL
}

model Order {
  id        Int    @id @default(autoincrement())
  status    Status
  amount    Float
  unitPrice Float

  cryptoId Int
  userId   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  crypto       Cryptocurrency @relation(fields: [cryptoId], references: [id], onDelete: Cascade)
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
}

model PurchaseOrder {
  id        Int    @id @default(autoincrement())
  status    Status
  amount    Float
  unitPrice Float

  cryptoId Int
  userId   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  crypto       Cryptocurrency @relation(fields: [cryptoId], references: [id], onDelete: Cascade)
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
}

model Transaction {
  id        Int   @id @default(autoincrement())
  amount    Float
  unitPrice Float

  cryptoId   Int
  purchaseId Int
  orderId    Int

  createdAt DateTime @default(now())

  crypto        Cryptocurrency @relation(fields: [cryptoId], references: [id], onDelete: Cascade)
  order         Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  purchaseOrder PurchaseOrder  @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
}

model Transfer {
  id     Int   @id @default(autoincrement())
  amount Float

  fromUserId Int
  toUserId   Int
  cryptoId   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  crypto   Cryptocurrency @relation(fields: [cryptoId], references: [id], onDelete: Cascade)
  fromUser User           @relation("fromUser", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser   User           @relation("toUser", fields: [toUserId], references: [id], onDelete: Cascade)
}
